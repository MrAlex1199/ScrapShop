import tkinter as tk
from tkinter import ttk, messagebox
import customtkinter as ctk
from openpyxl import Workbook, load_workbook
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from datetime import datetime
import os
import platform
import json

# Create folders if they don't exist
for folder in ['data', 'receipts_in', 'receipts_out']:
    if not os.path.exists(folder):
        os.makedirs(folder)


class ScrapShopApp:
    def __init__(self, root):
        self.root = root
        self.root.title("‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤ V6.1")
        self.root.state("zoomed")

        # --- CustomTkinter Style ---
        ctk.set_appearance_mode("System")  # Modes: "System", "Dark", "Light"
        # Themes: "blue", "green", "dark-blue"
        ctk.set_default_color_theme("green")

        # --- Initialize prices FIRST before other operations ---
        self.load_prices()
        print(
            f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠ {len(self.BUY_PRICES)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢ {len(self.SELL_PRICES)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

        # --- Initialize Thai font ---
        self.thai_font_name = self.register_thai_font()

        # Configure a style for the ttk Treeview to match CTk's theme
        style = ttk.Style(self.root)
        style.theme_use("default")  # Use default theme as a base
        style.configure("Treeview.Heading", font=(
            "TH Sarabun New", 18, "bold"))
        style.configure("Treeview", font=("TH Sarabun New", 16))

        # --- Main Frame ---
        main_frame = ctk.CTkFrame(self.root, corner_radius=10)
        main_frame.pack(fill=ctk.BOTH, expand=True, padx=20, pady=20)

        # --- Notebook (Tabview) ---
        self.notebook = ctk.CTkTabview(main_frame, width=800, height=600)
        self.notebook.pack(fill=ctk.BOTH, expand=True, padx=10, pady=10)

        # Setup Tabs
        self.incoming_tab = self.notebook.add("‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤")
        self.outgoing_tab = self.notebook.add("‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å")
        self.history_tab = self.notebook.add("‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏Ñ‡∏á‡∏Ñ‡∏•‡∏±‡∏á")

        self._setup_transaction_tab(
            self.incoming_tab, "in", self.BUY_PRICES, self.update_buy_price,
            "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢:", "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö:"
        )
        self._setup_transaction_tab(
            self.outgoing_tab, "out", self.SELL_PRICES, self.update_sell_price,
            "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡πà‡∏≤‡∏¢:", "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö (‡πÄ‡∏ä‡πà‡∏ô ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô):"
        )
        self.setup_history_tab()

        # Excel and JSON files
        self.incoming_excel = os.path.join(
            'data', 'incoming_scrap_records.xlsx')
        self.outgoing_excel = os.path.join(
            'data', 'outgoing_scrap_records.xlsx')
        self.receipt_history_file = os.path.join(
            'data', 'receipt_history.json')

        if not os.path.exists(self.incoming_excel):
            self.create_excel_file(self.incoming_excel)
        if not os.path.exists(self.outgoing_excel):
            self.create_excel_file(self.outgoing_excel)

        # Load histories
        self.load_excel_history(self.incoming_excel, self.incoming_calc_tree)
        self.load_excel_history(self.outgoing_excel, self.outgoing_calc_tree)
        self.load_receipt_history()

        # Compute inventory
        self.compute_inventory()

        # Current data
        self.current_in_data = None
        self.current_out_data = None

    def load_prices(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"""
        prices_file = 'prices.json'

        # ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
        default_buy_prices = {
            "‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏•‡∏±‡∏á": 3.50,
            "‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏Ç‡∏≤‡∏ß-‡∏î‡∏≥": 6.00,
            "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå": 7.50,
            "‡∏Ç‡∏ß‡∏î‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å‡πÉ‡∏™ (PET)": 13.50,
            "‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å‡∏Ç‡∏≤‡∏ß‡∏Ç‡∏∏‡πà‡∏ô/‡∏Ç‡∏ß‡∏î‡∏ô‡πâ‡∏≥": 11.00,
            "‡πÄ‡∏´‡∏•‡πá‡∏Å‡∏´‡∏ô‡∏≤": 9.50,
            "‡πÄ‡∏´‡∏•‡πá‡∏Å‡∏ö‡∏≤‡∏á": 8.00,
            "‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°": 60.00,
            "‡∏ó‡∏≠‡∏á‡πÅ‡∏î‡∏á (‡πÄ‡∏ö‡∏≠‡∏£‡πå 1)": 295.00,
            "‡∏™‡πÅ‡∏ï‡∏ô‡πÄ‡∏•‡∏™ (‡πÅ‡∏ó‡πâ)": 32.50,
            "‡∏Ç‡∏ß‡∏î‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå (‡∏ä‡πâ‡∏≤‡∏á, ‡∏•‡∏µ‡πÇ‡∏≠)": 13.00,
            "‡πÄ‡∏®‡∏©‡πÅ‡∏Å‡πâ‡∏ß‡∏Ç‡∏≤‡∏ß": 1.50
        }

        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if os.path.exists(prices_file):
                print(f"üìÅ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏Ñ‡∏≤: {prices_file}")

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
                file_size = os.path.getsize(prices_file)
                if file_size == 0:
                    print("‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤")
                    raise json.JSONDecodeError("Empty file", "", 0)

                print(f"üìä ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: {file_size} bytes")

                # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå
                with open(prices_file, 'r', encoding='utf-8') as f:
                    content = f.read().strip()
                    print(f"üìÑ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå: {content[:100]}..." if len(
                        content) > 100 else f"üìÑ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå: {content}")

                    if not content:
                        raise json.JSONDecodeError("Empty content", "", 0)

                    prices_data = json.loads(content)

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                if not isinstance(prices_data, dict):
                    raise ValueError("‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô dictionary")

                if 'BUY_PRICES' not in prices_data or 'SELL_PRICES' not in prices_data:
                    print("‚ö†Ô∏è ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà...")
                    raise KeyError("Missing BUY_PRICES or SELL_PRICES")

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πá‡∏ô dict ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                if not isinstance(prices_data['BUY_PRICES'], dict) or not prices_data['BUY_PRICES']:
                    print("‚ö†Ô∏è BUY_PRICES ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤")
                    raise ValueError("Invalid BUY_PRICES")

                if not isinstance(prices_data['SELL_PRICES'], dict) or not prices_data['SELL_PRICES']:
                    print("‚ö†Ô∏è SELL_PRICES ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤")
                    raise ValueError("Invalid SELL_PRICES")

                # ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤
                self.BUY_PRICES = prices_data['BUY_PRICES']
                self.SELL_PRICES = prices_data['SELL_PRICES']

                print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:")
                print(f"   - ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠: {list(self.BUY_PRICES.keys())}")
                print(f"   - ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢: {list(self.SELL_PRICES.keys())}")

            else:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏Ñ‡∏≤: {prices_file}")
                raise FileNotFoundError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {prices_file}")

        except (FileNotFoundError, json.JSONDecodeError, KeyError, ValueError) as e:
            print(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤: {e}")
            print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà...")

            # ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            self.BUY_PRICES = default_buy_prices.copy()
            self.SELL_PRICES = {k: round(v * 1.1, 2)
                                for k, v in self.BUY_PRICES.items()}

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà
            try:
                self.save_prices()
                print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {prices_file}")
                messagebox.showinfo(
                    "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà",
                    f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢\n"
                    f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà {prices_file}\n"
                    f"‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô {len(self.BUY_PRICES)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
                )
            except Exception as save_error:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ: {save_error}")
                messagebox.showerror(
                    "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
                    f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏î‡πâ: {save_error}\n"
                    f"‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥"
                )

        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {e}")
            messagebox.showerror(
                "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏î‡πâ: {e}")

            # ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
            self.BUY_PRICES = default_buy_prices.copy()
            self.SELL_PRICES = {k: round(v * 1.1, 2)
                                for k, v in self.BUY_PRICES.items()}

    def save_prices(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå JSON ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"""
        prices_file = 'prices.json'

        try:
            prices_data = {
                'BUY_PRICES': self.BUY_PRICES,
                'SELL_PRICES': self.SELL_PRICES
            }

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á
            if os.path.exists(prices_file):
                backup_file = f"{prices_file}.backup"
                try:
                    import shutil
                    shutil.copy2(prices_file, backup_file)
                    print(f"üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà {backup_file}")
                except:
                    pass

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
            with open(prices_file, 'w', encoding='utf-8') as f:
                json.dump(prices_data, f, ensure_ascii=False, indent=4)

            print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {prices_file}")

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            with open(prices_file, 'r', encoding='utf-8') as f:
                test_load = json.load(f)
                print(
                    f"üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå: BUY_PRICES={len(test_load['BUY_PRICES'])}, SELL_PRICES={len(test_load['SELL_PRICES'])}")

        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏î‡πâ: {e}")
            messagebox.showerror(
                "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏î‡πâ: {e}")

    def register_thai_font(self):
        """‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PDF"""
        try:
            # ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ü‡∏≠‡∏ô‡∏ï‡πå
            font_paths = [
                os.path.join(os.path.dirname(os.path.abspath(
                    __file__)), "TH Sarabun New Bold.ttf"),
                os.path.join(os.path.dirname(os.path.abspath(
                    __file__)), "THSarabunNew Bold.ttf"),
                os.path.join(os.path.dirname(os.path.abspath(
                    __file__)), "fonts", "TH Sarabun New Bold.ttf"),
                "C:/Windows/Fonts/THSarabunNew Bold.ttf",
                "C:/Windows/Fonts/TH Sarabun New Bold.ttf",
                "/usr/share/fonts/truetype/thai/TH Sarabun New Bold.ttf",
                "/usr/local/share/fonts/TH Sarabun New Bold.ttf",
                "/System/Library/Fonts/TH Sarabun New Bold.ttf",
                "/Library/Fonts/TH Sarabun New Bold.ttf"
            ]

            for font_path in font_paths:
                if os.path.exists(font_path):
                    try:
                        pdfmetrics.registerFont(TTFont('THSarabun', font_path))
                        print(f"‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {font_path}")
                        return 'THSarabun'
                    except Exception as e:
                        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ü‡∏≠‡∏ô‡∏ï‡πå {font_path}: {e}")
                        continue

            messagebox.showwarning(
                "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢",
                "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ü‡∏≠‡∏ô‡∏ï‡πå TH Sarabun New Bold.ttf\n\n"
                "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å https://fonts.google.com/specimen/Sarabun\n"
                "‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°\n\n"
                "‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå Helvetica ‡πÅ‡∏ó‡∏ô (‡∏≠‡∏≤‡∏à‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)"
            )
            return 'Helvetica'

        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ü‡∏≠‡∏ô‡∏ï‡πå: {e}")
            messagebox.showerror(
                "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏î‡πâ: {e}")
            return 'Helvetica'

    def _setup_transaction_tab(self, tab, mode, prices, update_price_cmd, label1_text, label2_text):
        vcmd = (self.root.register(self.validate_numeric), '%P')

        # Create a frame for the input form
        input_frame = ctk.CTkFrame(tab, fg_color="transparent")
        input_frame.pack(side=ctk.TOP, fill=ctk.X, padx=10, pady=10)

        ctk.CTkLabel(input_frame, text=label1_text, font=("TH Sarabun New", 18)).grid(
            row=0, column=0, padx=10, pady=10, sticky="w")
        name1_var = tk.StringVar()
        ctk.CTkEntry(input_frame, textvariable=name1_var, width=300, font=(
            "TH Sarabun New", 18)).grid(row=0, column=1, padx=10, pady=10, sticky="ew")

        ctk.CTkLabel(input_frame, text=label2_text, font=("TH Sarabun New", 18)).grid(
            row=1, column=0, padx=10, pady=10, sticky="w")
        name2_var = tk.StringVar()
        ctk.CTkEntry(input_frame, textvariable=name2_var, width=300, font=(
            "TH Sarabun New", 18)).grid(row=1, column=1, padx=10, pady=10, sticky="ew")

        ctk.CTkLabel(input_frame, text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:", font=("TH Sarabun New", 18)).grid(
            row=2, column=0, padx=10, pady=10, sticky="w")
        item_var = tk.StringVar()

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        price_list = list(prices.keys()) if prices else ["‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤"]
        print(f"üè∑Ô∏è ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {mode}: {price_list}")

        item_combobox = ctk.CTkComboBox(
            input_frame, variable=item_var, values=price_list, width=300, font=("TH Sarabun New", 18), command=update_price_cmd)
        item_combobox.grid(row=2, column=1, padx=10, pady=10, sticky="ew")

        ctk.CTkLabel(input_frame, text="‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏Å‡∏Å. (‡∏ö‡∏≤‡∏ó):", font=("TH Sarabun New",
                     18)).grid(row=3, column=0, padx=10, pady=10, sticky="w")
        price_var = tk.DoubleVar()
        ctk.CTkEntry(input_frame, textvariable=price_var, width=300, validate="key", validatecommand=vcmd, font=(
            "TH Sarabun New", 18)).grid(row=3, column=1, padx=10, pady=10, sticky="ew")

        ctk.CTkLabel(input_frame, text="‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏Å.):", font=(
            "TH Sarabun New", 18)).grid(row=4, column=0, padx=10, pady=10, sticky="w")
        weight_var = tk.DoubleVar()
        ctk.CTkEntry(input_frame, textvariable=weight_var, width=300, validate="key", validatecommand=vcmd, font=(
            "TH Sarabun New", 18)).grid(row=4, column=1, padx=10, pady=10, sticky="ew")

        button_frame = ctk.CTkFrame(input_frame, fg_color="transparent")
        button_frame.grid(row=5, column=0, columnspan=2, pady=20)

        ctk.CTkButton(button_frame, text="üßÆ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì", command=lambda: self._calculate(
            mode), font=("TH Sarabun New", 18, "bold")).grid(row=0, column=0, padx=20)
        save_print_button = ctk.CTkButton(button_frame, text="üíæüñ®Ô∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå", command=lambda: self._save_print(
            mode), state="disabled", font=("TH Sarabun New", 18, "bold"))
        save_print_button.grid(row=0, column=1, padx=20)

        result_label = ctk.CTkLabel(input_frame, text="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì", font=(
            "TH Sarabun New", 22, "bold"), text_color="green")
        result_label.grid(row=6, column=0, columnspan=2, pady=10)

        # --- History Table for this tab ---
        # Create a frame for the history table, so we can pack it to fill the remaining space
        history_frame = ctk.CTkFrame(tab, fg_color="transparent")
        history_frame.pack(side=ctk.BOTTOM, fill=ctk.BOTH,
                           expand=True, padx=10, pady=10)

        if mode == 'in':
            ctk.CTkLabel(history_frame, text="üìä ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤", font=(
                "TH Sarabun New", 20, "bold")).pack(anchor="w")
            self.incoming_calc_tree = ttk.Treeview(history_frame, columns=(
                "date", "seller", "buyer", "item", "price", "weight", "total"), show="headings", height=10)
            for col, text in zip(("date", "seller", "buyer", "item", "price", "weight", "total"), ("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢", "‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö", "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏Å‡∏Å.", "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å", "‡∏£‡∏ß‡∏°")):
                self.incoming_calc_tree.heading(col, text=text)
                self.incoming_calc_tree.column(col, width=150, anchor="center")
            self.incoming_calc_tree.pack(fill=ctk.BOTH, expand=True, pady=5)
            self.seller_var, self.buyer_var = name1_var, name2_var
            self.item_in_var, self.price_in_var, self.weight_in_var = item_var, price_var, weight_var
            self.save_print_in_button, self.result_in_label = save_print_button, result_label
        else:  # mode == 'out'
            ctk.CTkLabel(history_frame, text="üìä ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å", font=(
                "TH Sarabun New", 20, "bold")).pack(anchor="w")
            self.outgoing_calc_tree = ttk.Treeview(history_frame, columns=(
                "date", "payer", "recipient", "item", "price", "weight", "total"), show="headings", height=10)
            for col, text in zip(("date", "payer", "recipient", "item", "price", "weight", "total"), ("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏ú‡∏π‡πâ‡∏à‡πà‡∏≤‡∏¢", "‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö", "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏Å‡∏Å.", "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å", "‡∏£‡∏ß‡∏°")):
                self.outgoing_calc_tree.heading(col, text=text)
                self.outgoing_calc_tree.column(col, width=150, anchor="center")
            self.outgoing_calc_tree.pack(fill=ctk.BOTH, expand=True, pady=5)
            self.payer_var, self.recipient_var = name1_var, name2_var
            self.item_out_var, self.price_out_var, self.weight_out_var = item_var, price_var, weight_var
            self.save_print_out_button, self.result_out_label = save_print_button, result_label

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤
        if prices and len(prices) > 0:
            first_item = list(prices.keys())[0]
            item_var.set(first_item)
            print(f"üéØ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô: {first_item}")
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ update price command ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å GUI ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
            self.root.after(100, update_price_cmd)
        else:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")

    def setup_history_tab(self):
        tables_frame = ctk.CTkFrame(self.history_tab, fg_color="transparent")
        tables_frame.pack(fill=ctk.BOTH, expand=True)
        tables_frame.grid_rowconfigure((1, 3, 5), weight=1)
        tables_frame.grid_columnconfigure(0, weight=1)

        # Receipt In History
        ctk.CTkLabel(tables_frame, text="üßæ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤", font=(
            "TH Sarabun New", 20, "bold")).grid(row=0, column=0, sticky="w", pady=(10, 0))
        self.receipt_in_tree = ttk.Treeview(tables_frame, columns=(
            "date", "seller", "buyer", "item", "price", "weight", "total", "file"), show="headings", height=6)
        for col, text in zip(("date", "seller", "buyer", "item", "price", "weight", "total", "file"), ("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢", "‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö", "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏Å‡∏Å.", "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å", "‡∏£‡∏ß‡∏°", "‡πÑ‡∏ü‡∏•‡πå PDF")):
            self.receipt_in_tree.heading(col, text=text)
            self.receipt_in_tree.column(col, width=150, anchor="center")
        self.receipt_in_tree.grid(row=1, column=0, sticky="nsew", pady=5)

        # Receipt Out History
        ctk.CTkLabel(tables_frame, text="üßæ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å", font=(
            "TH Sarabun New", 20, "bold")).grid(row=2, column=0, sticky="w", pady=(20, 0))
        self.receipt_out_tree = ttk.Treeview(tables_frame, columns=(
            "date", "payer", "recipient", "item", "price", "weight", "total", "file"), show="headings", height=6)
        for col, text in zip(("date", "payer", "recipient", "item", "price", "weight", "total", "file"), ("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏ú‡∏π‡πâ‡∏à‡πà‡∏≤‡∏¢", "‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö", "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏Å‡∏Å.", "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å", "‡∏£‡∏ß‡∏°", "‡πÑ‡∏ü‡∏•‡πå PDF")):
            self.receipt_out_tree.heading(col, text=text)
            self.receipt_out_tree.column(col, width=150, anchor="center")
        self.receipt_out_tree.grid(row=3, column=0, sticky="nsew", pady=5)

        # Inventory
        ctk.CTkLabel(tables_frame, text="üì¶ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡∏Ñ‡∏•‡∏±‡∏á", font=(
            "TH Sarabun New", 20, "bold")).grid(row=4, column=0, sticky="w", pady=(20, 0))
        self.inventory_tree = ttk.Treeview(tables_frame, columns=(
            "item", "total_in", "total_out", "stock"), show="headings", height=6)
        for col, text in zip(("item", "total_in", "total_out", "stock"), ("‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏£‡∏ß‡∏°‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤", "‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å", "‡∏Ñ‡∏á‡∏Ñ‡∏•‡∏±‡∏á")):
            self.inventory_tree.heading(col, text=text)
            self.inventory_tree.column(col, width=150, anchor="center")
        self.inventory_tree.grid(row=5, column=0, sticky="nsew", pady=5)

    def validate_numeric(self, new_value):
        if new_value == "":
            return True
        try:
            float(new_value)
            return True
        except ValueError:
            return False

    def update_buy_price(self, event=None):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠"""
        try:
            selected_item = self.item_in_var.get()
            print(f"üîÑ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠: {selected_item}")

            if selected_item and selected_item in self.BUY_PRICES:
                price = self.BUY_PRICES[selected_item]
                self.price_in_var.set(price)
                print(f"üí∞ ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠: {price} ‡∏ö‡∏≤‡∏ó/‡∏Å‡∏Å.")
            else:
                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {selected_item}")
                self.price_in_var.set(0.0)
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠: {e}")
            self.price_in_var.set(0.0)

    def update_sell_price(self, event=None):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢"""
        try:
            selected_item = self.item_out_var.get()
            print(f"üîÑ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢: {selected_item}")

            if selected_item and selected_item in self.SELL_PRICES:
                price = self.SELL_PRICES[selected_item]
                self.price_out_var.set(price)
                print(f"üí∞ ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢: {price} ‡∏ö‡∏≤‡∏ó/‡∏Å‡∏Å.")
            else:
                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {selected_item}")
                self.price_out_var.set(0.0)
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢: {e}")
            self.price_out_var.set(0.0)

    def create_excel_file(self, excel_file):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel ‡πÉ‡∏´‡∏°‡πà"""
        try:
            wb = Workbook()
            ws = wb.active
            ws.title = "Records"
            ws.append(["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢/‡∏ú‡∏π‡πâ‡∏à‡πà‡∏≤‡∏¢", "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö",
                      "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏Å‡∏Å.", "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏Å.)", "‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)"])
            wb.save(excel_file)
            print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel ‡πÉ‡∏´‡∏°‡πà: {excel_file}")
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel ‡πÑ‡∏î‡πâ: {e}")
            messagebox.showerror(
                "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel ‡πÑ‡∏î‡πâ: {e}")

    def load_excel_history(self, excel_file, tree):
        """‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel"""
        if os.path.exists(excel_file):
            try:
                wb = load_workbook(excel_file, read_only=True)
                ws = wb.active
                row_count = 0
                for row in ws.iter_rows(min_row=2, values_only=True):
                    if row[0] is not None:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ñ‡∏ß‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á
                        tree.insert("", "end", values=row)
                        row_count += 1
                print(f"üìä ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å {excel_file}: {row_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            except Exception as e:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å Excel ‡πÑ‡∏î‡πâ: {e}")
                messagebox.showwarning(
                    "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å Excel: {e}")

    def load_receipt_history(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON"""
        try:
            if os.path.exists(self.receipt_history_file):
                with open(self.receipt_history_file, 'r', encoding='utf-8') as f:
                    history = json.load(f)

                in_count = len(history.get('in', []))
                out_count = len(history.get('out', []))

                for record in history.get('in', []):
                    self.receipt_in_tree.insert(
                        "", "end", values=tuple(record))
                for record in history.get('out', []):
                    self.receipt_out_tree.insert(
                        "", "end", values=tuple(record))

                print(
                    f"üìã ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à: ‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ {in_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢ {out_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            else:
                print(
                    f"üìÅ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à: {self.receipt_history_file}")
        except (FileNotFoundError, json.JSONDecodeError) as e:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÑ‡∏î‡πâ: {e}")
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à: {e}")

    def save_receipt_history(self, mode, data, filename):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à"""
        history = {'in': [], 'out': []}
        try:
            if os.path.exists(self.receipt_history_file):
                with open(self.receipt_history_file, 'r', encoding='utf-8') as f:
                    history = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            print("üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÉ‡∏´‡∏°‡πà")

        record = list(data) + [filename]
        history[mode].append(record)

        try:
            with open(self.receipt_history_file, 'w', encoding='utf-8') as f:
                json.dump(history, f, ensure_ascii=False, indent=4)
            print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {mode}")
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÑ‡∏î‡πâ: {e}")
            messagebox.showerror(
                "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à: {e}")

    def compute_inventory(self):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡∏Ñ‡∏•‡∏±‡∏á"""
        stock = {}

        # ‡∏ô‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤
        if os.path.exists(self.incoming_excel):
            try:
                wb_in = load_workbook(self.incoming_excel, read_only=True)
                ws_in = wb_in.active
                for row in ws_in.iter_rows(min_row=2, values_only=True):
                    if row[0] is None:
                        continue
                    _, _, _, item, _, weight, _ = row
                    if item and weight:
                        if item not in stock:
                            stock[item] = {'in': 0, 'out': 0}
                        stock[item]['in'] += float(weight)
            except Exception as e:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ: {e}")

        # ‡∏ô‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å
        if os.path.exists(self.outgoing_excel):
            try:
                wb_out = load_workbook(self.outgoing_excel, read_only=True)
                ws_out = wb_out.active
                for row in ws_out.iter_rows(min_row=2, values_only=True):
                    if row[0] is None:
                        continue
                    _, _, _, item, _, weight, _ = row
                    if item and weight:
                        if item not in stock:
                            stock[item] = {'in': 0, 'out': 0}
                        stock[item]['out'] += float(weight)
            except Exception as e:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ: {e}")

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï inventory tree
        self.inventory_tree.delete(*self.inventory_tree.get_children())
        for item, data in sorted(stock.items()):
            remaining = data['in'] - data['out']
            self.inventory_tree.insert("", "end", values=(
                item,
                f"{data['in']:.2f}",
                f"{data['out']:.2f}",
                f"{remaining:.2f}"
            ))

        print(f"üì¶ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡∏Ñ‡∏•‡∏±‡∏á: {len(stock)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

    def _calculate(self, mode):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°"""
        try:
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î
            if mode == 'in':
                name1, name2, item, price_var, weight_var = (
                    self.seller_var, self.buyer_var, self.item_in_var,
                    self.price_in_var, self.weight_in_var
                )
                result_label = self.result_in_label
                save_print_button = self.save_print_in_button
                tree = self.incoming_calc_tree
            else:  # mode == 'out'
                name1, name2, item, price_var, weight_var = (
                    self.payer_var, self.recipient_var, self.item_out_var,
                    self.price_out_var, self.weight_out_var
                )
                result_label = self.result_out_label
                save_print_button = self.save_print_out_button
                tree = self.outgoing_calc_tree

            # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
            name1_val = name1.get().strip()
            name2_val = name2.get().strip()
            item_val = item.get()
            price_per_kg = price_var.get()
            weight = weight_var.get()

            print(
                f"üßÆ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì {mode}: {item_val}, {price_per_kg} ‡∏ö‡∏≤‡∏ó/‡∏Å‡∏Å., {weight} ‡∏Å‡∏Å.")

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if not name1_val or not name2_val or not item_val or price_per_kg <= 0 or weight <= 0:
                missing = []
                if not name1_val:
                    missing.append("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢/‡∏ú‡∏π‡πâ‡∏à‡πà‡∏≤‡∏¢")
                if not name2_val:
                    missing.append("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö")
                if not item_val:
                    missing.append("‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
                if price_per_kg <= 0:
                    missing.append("‡∏£‡∏≤‡∏Ñ‡∏≤")
                if weight <= 0:
                    missing.append("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å")

                messagebox.showerror(
                    "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô", f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô:\n- {', '.join(missing)}")
                return

            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
            total = price_per_kg * weight
            current_data = (
                datetime.now().strftime('%d/%m/%Y %H:%M:%S'),
                name1_val, name2_val, item_val, price_per_kg, weight, total
            )

            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            result_label.configure(text=f"‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô: {total:,.2f} ‡∏ö‡∏≤‡∏ó")
            save_print_button.configure(state="normal")
            tree.insert("", "end", values=current_data)

            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            if mode == 'in':
                self.current_in_data = current_data
            else:
                self.current_out_data = current_data

            print(f"‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {total:,.2f} ‡∏ö‡∏≤‡∏ó")

        except ValueError as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç: {e}")
            messagebox.showerror(
                "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì: {e}")
            messagebox.showerror("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ: {e}")

    def _save_print(self, mode):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à"""
        try:
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î
            if mode == 'in':
                data = self.current_in_data
                excel_file = self.incoming_excel
                tree = self.receipt_in_tree
            else:  # mode == 'out'
                data = self.current_out_data
                excel_file = self.outgoing_excel
                tree = self.receipt_out_tree

            if not data:
                messagebox.showerror("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
                return

            print(f"üíæ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {mode}...")

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Excel
            self.save_excel(data, excel_file)

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à PDF
            filename = self.print_receipt(data, mode)

            if filename:
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
                self.save_receipt_history(mode, data, filename)
                tree.insert("", "end", values=(*data, filename))
                print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {filename}")

            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡∏Ñ‡∏•‡∏±‡∏á
            self.compute_inventory()

        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {e}")
            messagebox.showerror("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ: {e}")

    def save_excel(self, data, excel_file):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå Excel"""
        try:
            if os.path.exists(excel_file):
                wb = load_workbook(excel_file)
                ws = wb.active
            else:
                self.create_excel_file(excel_file)
                wb = load_workbook(excel_file)
                ws = wb.active

            ws.append(data)
            wb.save(excel_file)
            print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Excel ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {excel_file}")
            messagebox.showinfo(
                "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á {os.path.basename(excel_file)} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

        except PermissionError:
            print(f"‚ùå ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò: {excel_file}")
            messagebox.showerror("‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò",
                                 "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Excel ‡πÑ‡∏î‡πâ: {e}")
            messagebox.showerror(
                "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Excel ‡πÑ‡∏î‡πâ: {e}")

    def print_receipt(self, data, mode):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à PDF ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"""
        try:
            date, name1, name2, item, price_per_kg, weight, total = data
            dt_str = datetime.now().strftime('%Y%m%d_%H%M%S')
            folder = 'receipts_in' if mode == 'in' else 'receipts_out'
            filename = os.path.join(folder, f"receipt_{dt_str}.pdf")

            print(f"üñ®Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à: {filename}")

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
            c = canvas.Canvas(filename, pagesize=letter)
            width, height = letter

            try:
                c.setFont(self.thai_font_name, 20)
            except:
                c.setFont('Helvetica', 20)
                print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ Helvetica ‡πÅ‡∏ó‡∏ô")

            title = "‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤" if mode == 'in' else "‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤"
            title_width = c.stringWidth(title, self.thai_font_name, 20)
            c.drawString((width - title_width) / 2, height - 100, title)

            y_position = height - 150
            line_height = 25

            try:
                c.setFont(self.thai_font_name, 16)
            except:
                c.setFont('Helvetica', 16)

            label1 = "‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢:" if mode == 'in' else "‡∏ú‡∏π‡πâ‡∏à‡πà‡∏≤‡∏¢:"
            lines = [
                f"{label1} {name1}",
                f"‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö: {name2}",
                f"‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {item}",
                f"‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢: {price_per_kg:,.2f} ‡∏ö‡∏≤‡∏ó/‡∏Å‡∏Å.",
                f"‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: {weight:,.2f} ‡∏Å‡∏Å.",
            ]

            for line in lines:
                c.drawString(100, y_position, line)
                y_position -= line_height

            c.line(100, y_position - 10, width - 100, y_position - 10)
            y_position -= 30

            try:
                c.setFont(self.thai_font_name, 18)
            except:
                c.setFont('Helvetica-Bold', 18)

            total_text = f"‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô: {total:,.2f} ‡∏ö‡∏≤‡∏ó"
            c.drawString(100, y_position, total_text)

            c.line(100, y_position - 20, width - 100, y_position - 20)
            y_position -= 40

            try:
                c.setFont(self.thai_font_name, 14)
            except:
                c.setFont('Helvetica', 14)

            c.drawString(100, y_position, f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {date}")

            y_position -= 80
            c.drawString(100, y_position,
                         "‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö: _____________________")
            c.drawString(350, y_position,
                         "‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏à‡πà‡∏≤‡∏¢: _____________________")

            c.save()

            self.open_file(filename)
            messagebox.showinfo(
                "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à PDF ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n‡πÑ‡∏ü‡∏•‡πå: {filename}")
            return filename

        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à PDF ‡πÑ‡∏î‡πâ: {e}")
            messagebox.showerror(
                "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à PDF ‡πÑ‡∏î‡πâ: {e}")
            return None

    def open_file(self, filename):
        """‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
        try:
            system = platform.system()
            if system == "Windows":
                os.startfile(filename)
            elif system == "Darwin":
                os.system(f"open '{filename}'")
            elif system == "Linux":
                os.system(f"xdg-open '{filename}'")
            else:
                messagebox.showinfo(
                    "‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå", f"‡πÑ‡∏ü‡∏•‡πå {filename} ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ‡∏ö‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á")
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {e}")
            messagebox.showinfo(
                "‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå", f"‡πÑ‡∏ü‡∏•‡πå {filename} ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á")

    def open_file(self, filename):
        """‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
        try:
            system = platform.system()
            if system == "Windows":
                os.startfile(filename)
            elif system == "Darwin":
                os.system(f"open '{filename}'")
            elif system == "Linux":
                os.system(f"xdg-open '{filename}'")
            else:
                messagebox.showinfo(
                    "‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå", f"‡πÑ‡∏ü‡∏•‡πå {filename} ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ‡∏ö‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á")
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {e}")
            messagebox.showinfo(
                "‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå", f"‡πÑ‡∏ü‡∏•‡πå {filename} ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡∏ö‡∏±‡∏Å - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏Ñ‡∏≤
def debug_prices_file():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡∏ö‡∏±‡∏Å"""
    prices_file = 'prices.json'

    print("üîç === ‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡∏ö‡∏±‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏Ñ‡∏≤ ===")
    print(f"üìÅ ‡πÑ‡∏ü‡∏•‡πå: {prices_file}")
    print(f"üìÇ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {os.getcwd()}")
    print(f"üìÑ ‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà: {os.path.exists(prices_file)}")

    if os.path.exists(prices_file):
        file_size = os.path.getsize(prices_file)
        print(f"üìä ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: {file_size} bytes")

        try:
            with open(prices_file, 'r', encoding='utf-8') as f:
                content = f.read()
                print(f"üìù ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå ({len(content)} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£):")
                print("-" * 50)
                print(content)
                print("-" * 50)

                # ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á JSON
                f.seek(0)
                data = json.load(f)
                print(f"‚úÖ ‡πÅ‡∏õ‡∏•‡∏á JSON ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                print(f"üîë ‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö: {list(data.keys())}")

                if 'BUY_PRICES' in data:
                    print(
                        f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠: {len(data['BUY_PRICES'])} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                    for item, price in list(data['BUY_PRICES'].items())[:3]:
                        print(f"   - {item}: {price}")
                    if len(data['BUY_PRICES']) > 3:
                        print(
                            f"   ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(data['BUY_PRICES']) - 3} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

                if 'SELL_PRICES' in data:
                    print(
                        f"üè™ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢: {len(data['SELL_PRICES'])} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                    for item, price in list(data['SELL_PRICES'].items())[:3]:
                        print(f"   - {item}: {price}")
                    if len(data['SELL_PRICES']) > 3:
                        print(
                            f"   ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(data['SELL_PRICES']) - 3} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

        except json.JSONDecodeError as e:
            print(f"‚ùå ‡πÑ‡∏ü‡∏•‡πå JSON ‡∏ú‡∏¥‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: {e}")
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå: {e}")
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏Ñ‡∏≤")

    print("üîç === ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡∏ö‡∏±‡∏Å ===\n")

if __name__ == "__main__":
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏µ‡∏ö‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
    debug_prices_file()

    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°...")
    root = ctk.CTk()
    app = ScrapShopApp(root)
    root.mainloop()
